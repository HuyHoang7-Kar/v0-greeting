"use client";
import { useEffect, useState } from "react";
import { supabase } from "@/lib/supabase/client";

interface User {
  id: string;
  email: string;
  role: string;
  created_at: string;
}

export default function UserList() {
  const [users, setUsers] = useState<User[]>([]);
  const [newEmail, setNewEmail] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [newRole, setNewRole] = useState("student");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // üß© Load danh s√°ch user khi v√†o trang
  useEffect(() => {
    fetchUsers();
  }, []);

  async function fetchUsers() {
    try {
      setLoading(true);
      setError(null);

      const { data, error } = await supabase
        .from("profiles")
        .select("id, email, role, created_at")
        .order("created_at", { ascending: false });

      if (error) throw error;
      setUsers(data || []);
    } catch (err: any) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng!");
    } finally {
      setLoading(false);
    }
  }

  async function deleteUser(id: string) {
    if (!confirm("‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n n√†y?")) return;

    try {
      const { error } = await supabase.from("profiles").delete().eq("id", id);
      if (error) throw error;
      alert("üóëÔ∏è ƒê√£ x√≥a ng∆∞·ªùi d√πng!");
      fetchUsers();
    } catch (err: any) {
      alert("‚ùå L·ªói x√≥a ng∆∞·ªùi d√πng: " + err.message);
    }
  }

  async function createUser() {
    if (!newEmail || !newPassword)
      return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!");

    try {
      setLoading(true);
      setError(null);

      // 1Ô∏è‚É£ T·∫°o t√†i kho·∫£n Supabase Auth
      const { data, error } = await supabase.auth.signUp({
        email: newEmail,
        password: newPassword,
      });

      if (error) throw error;
      if (!data?.user) throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng tin ng∆∞·ªùi d√πng.");

      // 2Ô∏è‚É£ Th√™m th√¥ng tin v√†o b·∫£ng profiles
      const { error: profileError } = await supabase.from("profiles").insert({
        id: data.user.id,
        email: newEmail,
        role: newRole,
        created_at: new Date().toISOString(),
      });

      if (profileError) throw profileError;

      alert("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng!");
      setNewEmail("");
      setNewPassword("");
      fetchUsers();
    } catch (err: any) {
      console.error("‚ùå L·ªói t·∫°o ng∆∞·ªùi d√πng:", err);
      alert("‚ùå " + err.message);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-4">
      <h2 className="text-2xl font-semibold mb-4">üë• Qu·∫£n l√Ω t√†i kho·∫£n</h2>

      <div className="flex flex-wrap gap-2 mb-4">
        <input
          className="border p-2 rounded"
          placeholder="Email m·ªõi"
          value={newEmail}
          onChange={(e) => setNewEmail(e.target.value)}
        />
        <input
          className="border p-2 rounded"
          placeholder="M·∫≠t kh·∫©u"
          type="password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
        />
        <select
          className="border p-2 rounded"
          value={newRole}
          onChange={(e) => setNewRole(e.target.value)}
        >
          <option value="student">H·ªçc sinh</option>
          <option value="teacher">Gi√°o vi√™n</option>
          <option value="admin">Admin</option>
        </select>
        <button
          disabled={loading}
          className={`${
            loading
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-blue-500 hover:bg-blue-600"
          } text-white px-4 rounded`}
          onClick={createUser}
        >
          {loading ? "‚è≥ ƒêang t·∫°o..." : "‚ûï T·∫°o"}
        </button>
      </div>

      {error && <p className="text-red-500 mb-3">{error}</p>}

      {loading && users.length === 0 ? (
        <p>‚è≥ ƒêang t·∫£i danh s√°ch...</p>
      ) : users.length === 0 ? (
        <p className="italic text-gray-500">Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.</p>
      ) : (
        <table className="w-full border border-gray-300">
          <thead>
            <tr className="bg-gray-200">
              <th className="p-2 border">Email</th>
              <th className="p-2 border">Vai tr√≤</th>
              <th className="p-2 border">Ng√†y t·∫°o</th>
              <th className="p-2 border">X√≥a</th>
            </tr>
          </thead>
          <tbody>
            {users.map((u) => (
              <tr key={u.id} className="hover:bg-gray-50">
                <td className="border p-2">{u.email}</td>
                <td className="border p-2 capitalize">{u.role}</td>
                <td className="border p-2">
                  {new Date(u.created_at).toLocaleString("vi-VN")}
                </td>
                <td className="border p-2 text-center">
                  <button
                    className="text-red-500 hover:underline"
                    onClick={() => deleteUser(u.id)}
                  >
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
